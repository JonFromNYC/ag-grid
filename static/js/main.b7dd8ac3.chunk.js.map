{"version":3,"sources":["Components/Description.component.jsx","App.js","index.js"],"names":["Description","style","border","padding","App","props","onButtonClick","e","selectedDataStringPresentation","gridApi","getSelectedNodes","map","node","data","make","model","join","alert","state","columnDefs","headerName","field","rowGroup","rowData","autoGroupColumnDef","cellRenderer","cellRendererParams","checkbox","fetch","then","result","json","setState","height","width","className","onClick","this","rowSelection","onGridReady","params","api","groupSelectsChildren","Component","ReactDOM","render","document","getElementById"],"mappings":"sRA+BeA,G,MA7BK,WAChB,OACI,6BACI,0GADJ,UAGE,4BACM,oDACA,8DACA,+GAEA,8EACA,sJATR,WAcI,4BACI,yCAAc,0BAAMC,MAAO,CAAEC,OAAQ,sBAAuBC,QAAS,oBAAvD,UAAd,gCACA,4GACA,6CAAkB,0BAAMF,MAAO,CAAEC,OAAQ,sBAAuBC,QAAS,oBAAvD,UAAlB,mCACA,0EACA,yCAAc,0BAAMF,MAAO,CAAEC,OAAQ,sBAAuBC,QAAS,oBAAvD,qBAAd,qCACA,4KACA,qKCkCDC,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAwBRC,cAAgB,SAAAC,GACd,IAEMC,EAFgB,EAAKC,QAAQC,mBACAC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QACAF,KAAI,SAAAC,GAAI,OAAIA,EAAKE,KAAO,IAAMF,EAAKG,SAAOC,KAAK,MACnGC,MAAM,mBAAD,OAAoBT,KA3BzB,EAAKU,MAAQ,CACXC,WAAY,CAAC,CACXC,WAAY,OAAQC,MAAO,OAAQC,UAAU,GAC5C,CACDF,WAAY,QAASC,MAAO,UAE9BE,QAAS,KACTC,mBAAoB,CAClBJ,WAAY,QACZC,MAAO,QACPI,aAAc,sBACdC,mBAAoB,CAClBC,UAAU,KAdC,E,gEAmBE,IAAD,OAClBC,MAAM,oHACHC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAN,GAAO,OAAI,EAAKS,SAAS,CAAET,iB,+BAU3B,IAAD,OACP,OAEE,yBAAKtB,MAAO,CAAEgC,OAAQ,QAASC,MAAO,SAAWC,UAAU,mBACzD,4BAAQC,QAASC,KAAK/B,eAAtB,qBACA,kBAAC,cAAD,CACEgC,aAAa,WACbC,YAAa,SAAAC,GAAM,OAAI,EAAK/B,QAAU+B,EAAOC,KAC7CtB,WAAYkB,KAAKnB,MAAMC,WACvBuB,sBAAsB,EACtBlB,mBAAoBa,KAAKnB,MAAMM,mBAC/BD,QAASc,KAAKnB,MAAMK,UAEtB,kBAAC,EAAD,W,GA9CUoB,aCFlBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.b7dd8ac3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Description = () => {\n    return (\n        <div>\n            <p>This is a React Component using AG-Grid to make an interactive pivot table.</p>\n          You can \n          <ul>\n                <li>Select multiple rows</li>\n                <li>Group/Ungroup the list of cars</li>\n                <li>Sort or Filter the grid when you hover over the column names the filter appears\n                </li>\n                <li>Right Click to export to .csv, .xml, or .xlsx.</li>\n                <li>Save selections you've checked off and save them to a database.\n                    Click a few boxes and then click \"Get Selected Rows\"\n                </li>\n          </ul>\n          Try this\n            <ol>\n                <li>Click the <span style={{ border: '1px solid lightGrey', padding: '0px 3px 0px 3px'}}>›</span> button to the left of Ford.</li>\n                <li>Click the checkbox to select one of the rows from the list that dropped down</li>\n                <li>Now click the <span style={{ border: '1px solid lightGrey', padding: '0px 3px 0px 3px' }}>›</span> button to the left of Porsche.</li>\n                <li>Click the first checkbox in this drop down</li>\n                <li>Click the <span style={{ border: '1px solid lightGrey', padding: '0px 3px 0px 3px' }}>Get Selected rows</span> button to save what you selected</li>\n                <li>Next, test the exporting functions. Right click the last row you selected. Mouse over to Export and choose the export option of your choice.</li>\n                <li>Last, hover the cursor over any column name. A menu button will appear. Click the menu button and try some of the extra features.</li>\n            </ol>\n        </div>\n    );\n};\n\nexport default Description;","import React, { Component } from 'react';\nimport './App.scss';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport Description from './Components/Description.component';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnDefs: [{\n        headerName: \"Make\", field: \"make\", rowGroup: true\n      }, {\n        headerName: \"Price\", field: \"price\"\n      }],\n      rowData: null,\n      autoGroupColumnDef: {\n        headerName: \"Model\",\n        field: \"model\",\n        cellRenderer: 'agGroupCellRenderer',\n        cellRendererParams: {\n          checkbox: true\n        }\n      }\n    }\n  }\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/sample-data/rowData.json')\n      .then(result => result.json())\n      .then(rowData => this.setState({ rowData }))\n  }\n\n  onButtonClick = e => {\n    const selectedNodes = this.gridApi.getSelectedNodes()\n    const selectedData = selectedNodes.map(node => node.data)\n    const selectedDataStringPresentation = selectedData.map(node => node.make + ' ' + node.model).join(', ')\n    alert(`Selected nodes: ${selectedDataStringPresentation}`)\n  }\n\n  render() {\n    return (\n      \n      <div style={{ height: '250px', width: '600px' }} className=\"ag-theme-alpine\">\n        <button onClick={this.onButtonClick}>Get selected rows</button>\n        <AgGridReact\n          rowSelection=\"multiple\"\n          onGridReady={params => this.gridApi = params.api}\n          columnDefs={this.state.columnDefs}\n          groupSelectsChildren={true}\n          autoGroupColumnDef={this.state.autoGroupColumnDef}\n          rowData={this.state.rowData}>\n        </AgGridReact>\n        <Description />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}